# @TODO: Add meta regions for (fn ...) declarations, with docstring `string.quoted.docstring.fennel`
#        scope.
# @TODO: Properly implement parsing of fn/macro/λ/binding-adjacent structures to properly scope
#        parameters, symbol identifiers in declarations, etc. Did this in sublime-syntax, just
#        reimplement here 4head

name: Fennel
scopeName: source.fennel

# Based on fennel sublime-syntax
variables:
  identNaive: '[a-zA-Z_][\w-]*'
  identPostfix: '[?!]'
  identPostfixOptional: '{{identPostfix}}?'

  lua_coroutine_members: create|isyieldable|resume|running|status|wrap|yield
  lua_debug_members:     debug|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|getuservalue|sethook|setlocal|setmetatable|setupvalue|setuservalue|traceback|upvalueid|upvaluejoin
  lua_io_members:        close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write
  lua_math_members:      abs|acos|asin|atan|ceil|cos|deg|exp|floor|fmod|huge|log|max|maxinteger|min|mininteger|modf|pi|rad|random|randomseed|sin|sqrt|tan|tointeger|type|ult
  lua_os_members:        clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname
  lua_package_members:   config|cpath|loaded|loadlib|path|preload|searchers|searchpath
  lua_string_members:    byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper
  lua_table_members:     concat|insert|move|pack|remove|sort|unpack
  lua_utf8_members:      char|charpattern|codepoint|codes|len|offset

  lua_coroutine: 'coroutine\.(close|create|isyieldable|resume|running|status|wrap|yield)'
  lua_debug:     'debug\.(debug|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|getuservalue|setcstacklimit|sethook|setlocal|setmetatable|setupvalue|setuservalue|traceback|upvalueid|upvaluejoin)'
  lua_io:        'io\.(close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)'
  lua_math:      'math\.(abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|huge|ldexp|log|maxinteger|max|mininteger|min|modf|pi|pow|rad|randomseed|random|sin|sinh|sqrt|tan|tanh|tointeger|type|ult)'
  lua_os:        'os\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)'
  lua_package:   'package\.(config|cpath|loaded|loadlib|path|preload|searchers|searchpath)'
  lua_string:    'string\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|packsize|pack|rep|reverse|sub|unpack|upper)'
  lua_table:     'table\.({{lua_table_members}})'
  lua_utf8:      'utf8\.({{lua_utf8_members}})'
  lua_variables: '_G|_VERSION|{{lua_coroutine}}|coroutine|{{lua_debug}}|debug|{{lua_io}}|io|{{lua_math}}|math|{{lua_os}}|os|{{lua_package}}|package|{{lua_string}}|string|{{lua_table}}|table|{{lua_utf8}}|utf8'
  lua_functions: 'assert|collectgarbage|dofile|error|getmetatable|ipairs|loadfile|load|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setmetatable|tonumber|tostring|type|warn|xpcall|{{lua_coroutine}}|{{lua_debug}}|{{lua_io}}|{{lua_math}}|{{lua_os}}|{{lua_package}}|{{lua_string}}|{{lua_table}}|{{lua_utf8}}'
  # -------------------------------------------------
  lua_constants: 'true|false|nil'
  lua_keywords:  'if|while|do|for'
  # Originally in keywords, moved to more appropiate name in lua but regardless they're more keywords
  # in fennel—e.g. `and` operator in lua is of the form `<value> and <value>`, but in fennel
  # its `(and <value> <value>)`)
  lua_operator_logical: 'and|not|or'
  lua_operators: '{{lua_operator_logical}}\+|\-|\%|\*|\/\/|\/|\^|\.\.|\>|\<|\>=|\<=|=|\.|\:|\.\.\.'
  # -------------------------------------------------
  namespace_accessor_chars: '\.:'
  # -------------------------------------------------
  # Character Sets - Raw Character List - *chars
  non_symbol_chars:       '\s,;\(\)\[\]\{\}\"`~@\^\\'
  non_symbol_start_chars: '{{non_symbol_chars}}\d#'':'
  non_number_chars:       '{{non_symbol_chars}}#'''
  non_char_chars:         '{{non_symbol_chars}}#'''
  # Character Sets - Set form - *charset
  non_symbol_charset:       '[\s,;\(\)\[\]\{\}\"`~@\^\\]'
  non_symbol_start_charset: '[{{non_symbol_chars}}\d#'':]'
  non_number_charset:       '[{{non_symbol_chars}}#'']'
  non_char_charset:         '[{{non_symbol_chars}}#'']'
  non_namespaced_symbol_segment_charset: '[{{non_symbol_chars}}{{namespace_accessor_chars}}]'
  # -------------------------------------------------
  atomic_charset:   '[^{{non_symbol_chars}}]'
  atom:             '{{atomic_charset}}+'
  symbol:           (?:/|[^{{non_symbol_start_chars}}][^{{non_symbol_chars}}]*)
  # {{symbol}} => {{namespaced_symbol_segment}} ( `.` {{namespaced_symbol_segment}} )*
  #            | (any existing forms of {{symbol}} not relevant to explaining {{namespaced_symbol_segment}})
  namespaced_symbol_segment: >-
    [^{{non_symbol_start_chars}}{{namespace_accessor_chars}}]
    [^{{non_symbol_chars}}{{namespace_accessor_chars}}]+
  # -------------------------------------------------
  lookahead_end_atom:            '(?=[{{non_symbol_chars}}])'
  lookbehind_first_item_in_sexp: '(?<=[\(][\s\n]*)'
  # -------------------------------------------------
  # Original: (?:->|-\?>>|-\?>|-\>\>)(?=[{{non_symbol_chars}}])
  fennel_threading_macros: '(?:-[?]?[>]{1,2}){{lookahead_end_atom}}'
  # Removed `fennel_operators` and placed its contents into `fennel_keywords` (just `not=`)
  fennel_keywords:         'band|bnot|bor|bxor|doc?|dotimes|doto|each|eval-compiler|global|hashfn|import-macros|include|length|lshift|macro|macrodebug|macros|match|not=|partial|pick-args|pick-values|println|rshift|set|tset|unpack|values|var|when|with-open'
  # -------------------------------------------------
  # Slightly too permissive
  # @TODO Not the best variable name
  keyword:                (:):?[^:{{non_symbol_chars}}][^{{non_symbol_chars}}]*
  constant:               (?:{{lua_constants}}){{lookahead_end_atom}}
  lua_support:            (?:{{lua_operators}}|{{lua_keywords}}|{{lua_functions}}){{lookahead_end_atom}}
  fennel_support:         (?:{{fennel_keywords}}){{lookahead_end_atom}}
  evil_octal:             '[-+]?0\d+N?{{lookahead_end_atom}}'
  sign:                   '[-+]?'
  exponent:               (?:[eE]{{sign}}\d+)
  dec_integer:            ({{sign}})\d+(N?)(?=[{{non_number_chars}}])
  hex_integer:            ({{sign}})(0[Xx])\h+(N?)(?=[{{non_number_chars}}])
  other_integer:          ({{sign}})((?:[2-9]|[1-9]\d+)[Rr])[0-9A-Za-z]+(?=[{{non_number_chars}}])
  rational:               ({{sign}})\d+(/)\d+(?=[{{non_number_chars}}])
  float:                  ({{sign}})\d+(?:(?:(\.)\d+{{exponent}}?|{{exponent}})(M)?|(M))(?=[{{non_number_chars}}])
  # -------------------------------------------------
  # Any format specifier except `%`, really
  any_format_specifier: '[aAcdeEfFgGinopsuxX]'

patterns:
  - include: '#expression'

repository:
  expression:
    comment: >-
      @TODO: Define entire separate expression context with quoted forms—first see how anyone else
             does this in a tmLanguage grammar
    patterns:
      - include: '#comment'
      - include: '#hash-func'
      - include: '#unquoted'
      - include: '#quoted-atom'
      - include: '#quoted-sexp'
      - include: '#sexp'
      - include: '#special'
      - include: '#keywords'
      - include: '#constants'
      - include: '#table'
      - include: '#vector'
      - include: '#lua'
      - include: '#strings'
      - include: '#methods'
      - include: '#symbols'

  symbol-like:
    comment: >-
      In short, patterns capturing atomic items—not subexpressions, e.g. bracket/brace wrapped
      regions, sexprs, vectors (excluding table literals and hash functions (repo), for now)
    patterns:
      - include: '#comment'
      - include: '#hash-func'
      - include: '#quoted-atom'
      # - include: '#quoted-sexp'
      # - include: '#sexp'
      - include: '#special'
      - include: '#keywords'
      - include: '#constants'
      - include: '#table'
      # - include: '#vector'
      - include: '#lua'
      - include: '#strings'
      - include: '#methods'
      - include: '#symbols'

  constants:
    patterns:
      - match: '\bnil(?=[ \{\(\[\)\]\}])' # lookahead-assert-any
        name: constant.language.nil.fennel
      - match: '\b(false|true)(?=[ \{\(\[\)\]\}])' # lookahead-assert-any
        name: constant.language.boolean.fennel
      - match: '([-]?\d+\.\d+([eE][+-]?\d+)?)(?=[ \{\(\[\)\]\}])' # lookahead-assert-any
        name: constant.numeric.double.fennel
      - match: '([-]?\d+)(?=[ \{\(\[\)\]\}])' # lookahead-assert-any
        name: constant.numeric.integer.fennel
      - name: constant.other.fennel
        # match: ':[^\s\n\(\[\{\)\]\}:#.,]+'
        match: '[:][a-zA-Z_-]+[a-zA-Z\d_-]*(?:[-][a-zA-Z\d_]+)*'

  comment:
    patterns:
      - name: comment.line.semicolon.fennel
        begin: '([;])'
        beginCaptures:
          '1': { name: punctuation.definition.comment.line.semicolon.fennel }
        end: (?:(?=\n)|$)
        patterns:
          - name: meta.region.documentation.TODO.fennel
            comment: >-
              TODO: Find proper scope for name
            match: '(@TODO)(?:(?=[\s]*$)|[ \t]+([^\n]*\S)\s*$)'
            captures:
              '1': { name: storage.type.class.documentation.fennel }
              '2': { name: markup.other.todo.fennel }

  hash-func:
    patterns:
      - match: '(#)([$]\d?)'
        name:  meta.expression.macro.hashfn.fennel
        captures:
          '1': { name: constant.language.function.hashfn.fennel }
          '2': { name: variable.language.macro.hashfn.fennel }


      - match: '(#)([a-zA-Z_][\w]*(?:-[a-zA-Z_][\w]*)*)'
        name:  meta.expression.macro.hashfn.fennel
        captures:
          '1': { name: support.function.hashfn.fennel }
          '2': { name: variable.language.macro.hashfn.fennel }
        comment: >-
          @TODO: Hash arguments can also be used as parts of multisyms. For instance, `#$.foo` is
                 a function which will return the value of the “foo” key in its first argument.

      - name:  meta.expression.macro.hashfn.fennel
        begin: '(#)(\()'
        end:   (\))
        beginCaptures:
          '0': { name: support.function.macro.hashfn.fennel      }
          '1': { name: keyword.special.macro.hashfn.begin.fennel }
          '2': { name: punctuation.section.parens.begin.fennel             }
        endCaptures:
          '0': { name: keyword.special.macro.hashfn.close.fennel }
          '1': { name: punctuation.section.parens.end.fennel }
        patterns:
          - match: '[\$][0-9](?:\.{{atom}})*'
            name:  variable.language.macro.hashfn.fennel
            comment: >-
              @TODO: Capturing namespaced tokens and their period delimiters (not just here)
          - match: '[\$][.]{3}{{lookahead_end_atom}}'
            name:  variable.language.macro.hashfn.fennel
          - include: '#expression'

  parameters:
    patterns:
      - name:  variable.parameter.special.vararg.fennel
        match: '\.{3}{{lookahead_end_atom}}'

      - name:  variable.parameter.special.fennel
        match: '(?:(_)|(&\w*)){{lookahead_end_atom}}'

      - name:  variable.parameter.optional.fennel
        match: '[?]{{atom}}'

      - name:  variable.parameter.fennel
        match: '[^?\s\n\(\)\[\]\{\}:#,\.][^\s\n\(\)\[\]\{\}:#,]*'


  declarations:
    patterns:
      # (fn ...)
      - begin: '(\()[\s\t]*((fn))[\s\t]+(?:({{symbol}})[\s\t]+)?'
        beginCaptures:
          '0': { name: meta.function.fennel }
          '1': { name: punctuation.section.parens.begin.fennel }
          '2': { name: storage.type.function.fennel }
          '3': { name: keyword.declaration.function.fennel }
          '4': { name: entity.name.function.fennel }
        end: '[\)]'
        endCaptures:
          '0': { name: punctuation.section.parens.end.fennel }

        patterns:
          - name: meta.function.parameters.fennel
            begin: '[\[]'
            beginCaptures:
              '0': { name: punctuation.section.brackets.begin.fennel }
            end:   '([\]])\s*'
            endCaptures:
              '1': { name: punctuation.section.brackets.end.fennel }
            patterns:
              - include: '#parameters'

          ## @NOTE Docstring highlighting now done with tree-sitter
          # - begin: (?=\s*"(?:["]{2})?)
          #   end: $
          #   name: meta.docstring-lookahead
          #   patterns:
          #     - name: string.docstring.fennel
          #       contentName: meta.block.documentation.fennel
          #       begin: (["]{3}|["])
          #       beginCaptures:
          #         '1': { name: punctuation.definition.string.docstring.begin.fennel }
          #       end:   '(\1)'
          #       endCaptures:
          #         '1': { name: punctuation.definition.string.docstring.end.fennel }

          # - begin: (?=[^"])
          #   end:   (?=\))
          #   patterns:

          - include: '#expression'

      # (λ ...)
      - begin: '(\()[\s\t]*((λ))[\s\t]+(?:({{symbol}})[\s\t]+)?'
        beginCaptures:
          '0': { name: meta.function.lambda.fennel }
          '1': { name: punctuation.section.parens.begin.fennel }
          '2': { name: storage.type.function.lambda.fennel }
          '3': { name: keyword.declaration.function.lambda.fennel }
          '4': { name: entity.name.function.lambda.fennel }
        end: '[\)]'
        endCaptures:
          '0': { name: punctuation.section.parens.end.fennel }

        patterns:
          - name: meta.lambda.parameters.fennel
            begin: '[\[]'
            beginCaptures:
              '0': { name: punctuation.section.brackets.begin.fennel }
            end:   '[\]]'
            endCaptures:
              '0': { name: punctuation.section.brackets.end.fennel }
            patterns:
              - include: '#parameters'

          - include: '#expression'

        comment: >-
          Expecting this to break on multiline definitions breaking after `λ` or before params.

          @TODO: Reference another grammar for how to build this without matching as much initially

      # (macro ...)
      - begin: '(\()[\s\t]*((macro))[\s\t]+(?:({{symbol}})[\s\t]+)?'
        beginCaptures:
          '0': { name: meta.macro.fennel }
          '1': { name: punctuation.section.parens.begin.fennel }
          '2': { name: storage.type.macro.fennel }
          '3': { name: keyword.declaration.macro.fennel }
          '4': { name: entity.name.macro.fennel }
        end: '[\)]'
        endCaptures:
          '0': { name: punctuation.section.parens.end.fennel }

        patterns:
          - name: meta.macro.parameters.fennel
            begin: '[\[]'
            beginCaptures:
              '0': { name: punctuation.section.brackets.begin.fennel }
            end:   '[\]]'
            endCaptures:
              '0': { name: punctuation.section.brackets.end.fennel }
            patterns:
              - include: '#parameters'

          - include: '#expression'

        comment: >-
          Expecting this to break on multiline definitions breaking after `λ` or before params.

          @TODO: Reference another grammar for how to build this without matching as much initially

  sexp:
    patterns:
      - include: '#declarations'

      - name: sexp.fennel
        begin: \(
        end:   \)
        beginCaptures:
          '0':
            name: punctuation.section.parens.begin.fennel
        endCaptures:
          '0':
            name: punctuation.section.parens.end.fennel
        patterns:
          - include: '#expression'

  unquoted:
    comment: >-
      @TODO: Handling (unquote ...)  form
    patterns:
      - include: '#unquoted-atom'
      - include: '#unquoted-sexp'

  unquoted-atom:
    name: meta.symbol.unquoted.fennel
    begin: ([,])(?={{atom}}) # |[\[(])
    beginCaptures:
      '1': { name: constant.language.unquote.fennel }
    end: (?=[{{non_symbol_chars}}])
    patterns:
      - include: '#symbol-like'

  unquoted-sexp:
    patterns:
      - name:  meta.vector.unquoted.fennel
        begin: '(,)(\[)'
        beginCaptures:
          '1': { name: constant.language.unquote.fennel }
          '2': { name: punctuation.section.brackets.begin.fennel }
        end:   '\]'
        endCaptures:
          '0': { name: punctuation.section.brackets.end.fennel }
        comment: >-
            @TODO: Decide on best locations to handle capturing unquoted forms
        patterns:
          - include: '#expression'

      - name:  meta.expression.unquoted.fennel
        begin: (,)(\()
        beginCaptures:
          '1': { name: constant.language.unquote.fennel }
          '2': { name: punctuation.section.parens.begin.fennel }
        end:   '\)'
        endCaptures:
          '0': { name: punctuation.section.parens.end.fennel }
        comment: >-
            @TODO: Decide on best locations to handle capturing unquoted forms
        patterns:
          - include: '#expression'

  quoted-atom:
    comment: >-
      @TODO: Handling (quote ...)  form
    name: meta.symbol.quoted.fennel
    begin: (['`])(?={{atom}}) # |[\[(])
    beginCaptures:
      '1': { name: constant.language.quote.fennel }
    end: (?=[{{non_symbol_chars}}])
    patterns:
      - include: '#symbol-like'

  quoted-sexp:
    comment: >-
      @TODO: Handling (quote ...)  form
    patterns:
      - name:  meta.vector.quoted.fennel
        begin: (['`])(\[)
        beginCaptures:
          '1': { name: constant.language.quote.fennel }
          '2': { name: punctuation.section.brackets.begin.fennel }
        end:   '\]'
        endCaptures:
          '0': { name: punctuation.section.brackets.end.fennel }
        comment: >-
            @TODO: Decide on best locations to handle capturing unquoted forms
        patterns:
          - include: '#comment'
          - include: '#unquoted'
          - include: '#expression'

      - name:  meta.expression.quoted.fennel
        begin: ([`'])(\()
        beginCaptures:
          '1': { name: constant.language.quote.fennel }
          '2': { name: punctuation.section.parens.begin.fennel }
        end:   \)
        endCaptures:
          '0': { name: punctuation.section.parens.end.fennel }
        comment: >-
            @TODO: Decide on best locations to handle capturing unquoted forms
        patterns:
          - include: '#comment'
          - include: '#unquoted'
          - include: '#expression'

  table:
    name:  meta.table.fennel
    begin: '\{'
    end:   '\}'
    beginCaptures:
      '0':
        name: punctuation.table.bracket.open.fennel
    endCaptures:
      '0':
        name: punctuation.table.bracket.close.fennel
    patterns:
      - include: '#expression'

  vector:
    name: meta.vector.fennel
    begin: '\['
    end:   '\]'
    beginCaptures:
      '0':
        name: punctuation.section.brackets.begin.fennel
    endCaptures:
      '0':
        name: punctuation.section.brackets.end.fennel
    patterns:
      - include: '#expression'

  special:
    patterns:
      - name: keyword.special.compiler.fennel
        comment: 'Compiler scope builtins'
        match: '(assert-compile|in-scope[?]|macroexpand|gensym|list[?]?|multi-sym[?]|table[?]|sequence[?]|sym[?]?|varg[?]){{lookahead_end_atom}}'
      - name:  keyword.operator.logical.fennel
        match: '\b(?:and|or|not){{lookahead_end_atom}}'
      - name:  keyword.operator.concat.fennel
        match: '(?<!\.)(\.{2}){{lookahead_end_atom}}'
      - name:  keyword.operator.arithmetic.fennel
        match: '(?:[+]|[-]|[*]|[/]{1,2}|[%]|[\^]){{lookahead_end_atom}}'
      - name:  keyword.operator.comparison.fennel
        match: '(?:[>]|[<]|[>][=]|[<][=]|[=]|not[=]){{lookahead_end_atom}}'
      - name:  keyword.operator.bitwise.fennel
        match: '\b(?:[rl]shift|band|bor|bxor|bnot){{lookahead_end_atom}}'
      - name:  keyword.operator.accessor.fennel
        match: '(?:(?<=\([\s]*)[\#]|length|[\?]?\.){{lookahead_end_atom}}'
      - name:  keyword.special.fennel
        match: '(?:[-]\>(?:\>)?){{lookahead_end_atom}}'
      - name:  keyword.special.fennel
        match: '(?:[-]\?\>(?:\>)?){{lookahead_end_atom}}'
      - name: keyword.special.fennel
        match: '(set-forcibly!){{lookahead_end_atom}}'
      - name: keyword.special.fennel
        match: >-
          \b(?:and|band|bnot|bor|bxor|collect|comment|do|doc|doto|each|eval-compiler|for|global|hashfn|icollect|if|import-macros|include|lambda|length|let|local|lshift|lua|macro|macrodebug|macros|match(?:-[a-zA-Z]+\w*)*|not=?|or|partial|pick-args|pick-values|quote|require-macros|rshift|set|tset|values|var|when|while|with-open){{lookahead_end_atom}}
      - name: keyword.control.fennel
        match: '\b(?:fn){{lookahead_end_atom}}'
      - name: keyword.special.fennel
        match: '(?:~=){{lookahead_end_atom}}'
      - name: keyword.special.fennel
        match: '(?:λ){{lookahead_end_atom}}'
      # Catch all for pseudo keyword like function symbols
      - name: keyword.special.other.fennel
        match: '(?:(?<=[\(][\s]*)(?:(?:fn|λ)[^\s\n\(\[\{\)\]\}:#\.,]+|[λ~=*/\\\$][λ~=*/\\\-\$]*))'

  lua:
    patterns:
      - name: support.function.fennel
        match: |-
          (?x)
            \b(
              assert
              | collectgarbage
              | dofile
              | error
              | [gs]etmetatable
              | load(?:file)?
              | next
              | [i]?pairs
              | [x]?pcall
              | print
              | raw(?:equal|[gs]et|len)
              | require
              | select
              | to(?:number|string)
              | type
            )
            (?! [\-\w] )

      - match: '(coroutine)(?:(\.)(?:({{lua_coroutine_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.coroutine.lua }
          '1': { name: support.module.coroutine.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(debug)(?:(\.)(?:({{lua_debug_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.debug.lua }
          '1': { name: support.module.debug.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(io)(?:(\.)(?:({{lua_io_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.io.lua }
          '1': { name: support.module.io.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(math)(?:(\.)(?:({{lua_math_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.math.lua }
          '1': { name: support.module.math.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(os)(?:(\.)(?:({{lua_os_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.os.lua }
          '1': { name: support.module.os.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(package)(?:(\.)(?:({{lua_package_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.package.lua }
          '1': { name: support.module.package.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(string)(?:(\.)(?:({{lua_string_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.string.lua }
          '1': { name: support.module.string.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(table)(?:(\.)(?:({{lua_table_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.table.lua }
          '1': { name: support.module.table.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      - match: '(utf8)(?:(\.)(?:({{lua_utf8_members}}){{lookahead_end_atom}}))?'
        captures:
          '0': { name: entity.function.utf8.lua }
          '1': { name: support.module.utf8.lua }
          '2': { name: punctuation.accessor.fennel  }
          '3': { name: support.function.lua }

      #region Original Builtin Package Pattern
      #
      # - name: support.function.library.fennel
      #   match: |-
      #     (?x)
      #       \b(
      #         coroutine(?:\.(?:create|isyieldable|resume|running|status|wrap|yield)|(?![\w\.]))
      #         | debug(?:\.(?:debug|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|getuservalue|sethook|setlocal|setmetatable|setupvalue|setuservalue|traceback|upvalueid|upvaluejoin)|(?![\w\.]))
      #         | io(?:\.(?:close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)|(?![\w\.]))
      #         | math(?:\.(?:abs|acos|asin|atan|ceil|cos|deg|exp|floor|fmod|huge|log|max|maxinteger|min|mininteger|modf|pi|rad|random|randomseed|sin|sqrt|tan|tointeger|type|ult)|(?![\w\.]))
      #         | os(?:\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|(?![\w\.]))
      #         | package(?:\.(?:config|cpath|loaded|loadlib|path|preload|searchers|searchpath)|(?![\w\.]))
      #         | string(?:\.(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|(?![\w\.]))
      #         | table(?:\.(?:concat|insert|move|pack|remove|sort|unpack)|(?![\w\.]))
      #         | utf8(?:\.(?:char|charpattern|codepoint|codes|len|offset)|(?![\w\.]))
      #       )
      #       (?= [^\w\.] )
      #
      #endregion Original Builtin Package Pattern
      - match: '\b(_(?:VERSION|ENV|G))(?=[^#\-])'
        name: constant.language.fennel

  string-format-expn:
    comment: >-
      Slightly too permissive—leaving it as-is
    patterns:
      # First test with matching modifiers
      # Flag capture does not assert no repeats—will break
      - match: (%)([0\-#+]*?)(0|[1-9]\d*)?(?:(\.)(0|[1-9]\d*)?)?({{any_format_specifier}})
        captures:
          '0': { name: constant.other.placeholder.string.lua }
          '1': { name: punctuation.format.delimiter.lua }
          '2': { name: constant.other.placeholder.modifier.flags.lua }
          '3': { name: constant.other.numeric.integer.lua }
          '4': { name: punctuation.format.placeholder.dot.lua }
          '5': { name: constant.other.numeric.integer.lua }
          '6': { name: support.constant.string.format.lua }

      # Just going to leave these here for now as basic fallbacks
      - match: (%)(i)
        captures:
         '0': { name: constant.other.placeholder.number.lua }
         '1': { name: punctuation.format.delimiter.lua }
         '2': { name: support.constant.string.format.fennel }

      - match: (%)(q)
        captures:
         '0': { name: constant.other.placeholder.quoted.lua }
         '1': { name: punctuation.format.delimiter.lua }
         '2': { name: support.constant.string.format.fennel }

  # @TODO Now that the base string-dquote matches format strings, either create a separate
  #       double quoted form match for docstrings, or a string-dquote repo that doesn't capture
  #       format strings and include it under string-doc (either of which may be partially added)

  string-dquote:
    name: string.quoted.double.fennel
    begin: '(["])'
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.fennel
    end:   '(?:["])'
    endCaptures:
      '0':
        name: punctuation.definition.string.end.fennel
    patterns:
      - include: '#string-format-expn'
      - name: constant.character.escape.fennel
        match: \\.


  ## @NOTE Docstring highlighting now done with tree-sitter
  # string-doc:
  #   name: string.docstring.fennel
  #   contentName: meta.block.documentation.fennel
  #   begin: '([\"]{3})'
  #   beginCaptures:
  #     '1':
  #       name: punctuation.definition.string.docstring.begin.fennel
  #   end:   '([\"]{3})'
  #   endCaptures:
  #     '1':
  #       name: punctuation.definition.string.docstring.end.fennel

  strings:
    patterns:
      - include: '#string-doc'
      - include: '#string-dquote'

  # @TODO: Same as the `keywords` variable lol
  keywords:
    patterns:
      - name: variable.language.vararg.fennel
        match: '(?<!\.)[\.]{3}(?!\.)'
      - name: string.literal.fennel
        # # Used this before realizing what you can really do with literal tag
        # match: '[:][a-zA-Z\d_]+[a-zA-Z\d_]*(?:[-][a-zA-Z\d_]+)*'
        # # A medium strict form
        # match: '(:)([^\s\n\(\[\{\)\]\}:#.,]+)'
        # # Permissive pattern that the range of whats possible based on uses in fennel source—
        # # matches the odd but valid uses like conditional function names and paths
        # # (e.g. `:-?>`, `:./?.lua`)
        match: '(:)([^\s\n\r\(\)\[\]\{\};]+)'
        captures:
          '1': { name: punctutation.string.literal.begin.fennel }
          '2': { name: constant.other.literal.fennel }

  methods:
    patterns:
      - name: entity.name.function.method.fennel
        match: '((\w+)([:])([^{{non_symbol_chars}}]+{{identPostfixOptional}}{{lookahead_end_atom}}))'
        captures:
          # If : accessor is being used, assume function call
          # @TODO: Handle detecting actually being called with lookbehind, and add a begin/end with
          #        a meta.method/function.call scope
          '0': { name: meta.function-call.fennel }
          '1': { name: variable.function.fennel }
          '2': { name: variable.fennel }
          '3': { name: punctuation.method.fennel }
          '4': { name: variable.member.fennel }
        # match: '\w+[:][^\s\n\(\[\{\)\]\}:#.,]+{{identPostfixOptional}}{{lookahead_end_atom}}'

  symbols:
    patterns:
      - name: variable.other.macro.generated.fennel
        match: '([^\s\n\(\)\[\]\{\}:#,]+)([#]){{lookahead_end_atom}}'
        captures:
          '1': { name: entity.name.variable.macro.generated.fennel }
          '2': { name: punctuation.variable.macro.generated.fennel }
      - name: entity.name.function.symbol.fennel
        match: '(?<=[\(][\s]*)(?:\w+(?:[.-]\w+)+[?!]?){{lookahead_end_atom}}'
        comment: 'Workround until proper matching of first atom in sexprs added.'

        #region Copied To `parameters` repository
      - name:  variable.parameter.special.fennel
        match: '(?:(_)|(&\w*)){{lookahead_end_atom}}'
      - name: variable.other.optional.fennel
        match: '[?]{{identNaive}}'
      - name: variable.other.fennel
        match: '[^?\s\n\(\)\[\]\{\}:#,\.][^\s\n\(\)\[\]\{\}:#,]*'
        #endregion Copied To `parameters` repository

      # Catch all for pseudo keyword like function symbols (jank)
      - name: keyword.special.other.fennel
        match: '(?:(?:fn|λ|macro(?:s|debug)|[a-z]*print[a-z])[^\s\n\(\[\{\)\]\}:#\.\-,]+|[λ+~=*/\\\$][λ~+=*/\\\-\$]*)'
